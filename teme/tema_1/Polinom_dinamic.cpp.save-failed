#include <iostream>
#include <math.h>
#include "Polinom_dinamic.h"
using namespace std;

double Polinom_dinamic::Calcul(int x){

    double value;
    while(head->next != NULL){

        value += pow(x, head->exponent) * head->coeficient;
        head = head->next;

    }
    return value;

}
void Polinom_dinamic::AddElement(double coef, double exp){

    while(head->next != NULL){
        head = head->next;
    }
    node* temp = new node;
    temp->coeficient = coef;
    temp->exponent = exp;
    temp->next = head;
    head = temp;
    delete temp;

}
Polinom_dinamic operator + (Polinom_dinamic& p1, Polinom_dinamic& p2){

    Polinom_dinamic p3;
    while(p1.head->next != NULL || p2.head->next != NULL){
        double sum = p1.head->coeficient + p2.head->coeficient;
        if(p1.head->exponent == p2.head->exponent && sum != 0){
            p3.AddElement(sum, p1.head->exponent);
            p1.head = p1.head->next;
            p2.head = p2.head->next;
        }else if(p1.head->exponent > p2.head->exponent){
            p3.AddElement(p1.head->coeficient, p1.head->exponent);
            p1.head = p1.head->next;
        }else{
            p3.AddElement(p2.head->coeficient, p2.head->exponent);
            p2.head = p2.head->next;
        }
    }
    while(p1.head->next != NULL){
        p3.AddElement(p1.head->coeficient, p1.head->exponent);
        p1.head = p1.head->next;
    }
    while(p2.head->next != NULL){
        p3.AddElement(p2.head->coeficient, p2.head->exponent);
        p2.head = p2.head->next;
    }
    return p3;

}
Polinom_dinamic operator - (Polinom_dinamic& p1, Polinom_dinamic& p2){

    Polinom_dinamic p3;
    while(p1.head->next != NULL || p2.head->next != NULL){
        double diff = p1.head->coeficient - p2.head->coeficient;
        if(p1.head->exponent == p2.head->exponent && diff != 0){
            p3.AddElement(diff, p1.head->exponent);
            p1.head = p1.head->next;
            p2.head = p2.head->next;
        }else if(p1.head->exponent > p2.head->exponent){
            p3.AddElement(p1.head->coeficient, p1.head->exponent);
            p1.head = p1.head->next;
        }else{
            p3.AddElement(p2.head->coeficient, p2.head->exponent);
            p2.head = p2.head->next;
        }
    }
    while(p1.head->next != NULL){
        p3.AddElement(p1.head->coeficient, p1.head->exponent);
        p1.head = p1.head->next;
    }
    while(p2.head->next != NULL){
        p3.AddElement(p2.head->coeficient, p2.head->exponent);
        p2.head = p2.head->next;
    }

    return p3;

}
Polinom_dinamic operator * (Polinom_dinamic& p1, Polinom_dinamic& p2){

    Polinom_dinamic p3;
    while(p1.head->next != NULL){
        node* aux = new node;
        aux = p2.head;
        while(aux->next != NULL){
            double product_coef = p1.head->coeficient * aux->coeficient;
            double product_exp = p1.head->exponent * aux->exponent;
            if(product_coef != 0){

                p3.AddElement(product_coef, product_exp);
            }
            aux = aux->next;
        }
        delete aux;
        p1.head = p1.head->next;
    }

    return p3;

}
ostream & operator << (ostream& out, Polinom_dinamic& p){

    if(p.head->coeficient >= 0){
        cout << p.head->coeficient << "*X^" << p.head->exponent;
    }else{
        cout << "- " << p.head->coeficient << "*X^" << p.head->exponent;
    }
    while(p.head->next != NULL){
        p.head = p.head->next;
        if(p.head->coeficient > 0){
        cout << " + " << p.head->coeficient << "*X^" << p.head->exponent;
        }else{
        cout << " - "<< p.head->coeficient << "*X^" << p.head->exponent;
        }

    }
    return out;

}
Polinom_dinamic::Polinom_dinamic(node* head_){

    head->coeficient = head_->coeficient;
    head->exponent = head_->exponent;
    head = head_;

}
Polinom_dinamic::Polinom_dinamic(){

    head = new node;
    head->coeficient = 0;
    head->exponent = 0;
    head->next = NULL;

}
Polinom_dinamic::~Polinom_dinamic(){

    delete head;
    cout << endl << "Au revoir, object";

}

